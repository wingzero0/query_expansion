<?php
// The program compares the query suggestion performance between two input files.
// Assume one file was generated by QueryCompletion, other one was generated by baseline(MostFreq).
// If the groud truth of a query is suggested in the higher rank in one file, the query will be outputed.

class SelectDifferent{
	public $f1;
	public $f2;
	public $fp1;
	public $fp2;
	public $ofp1;
	public $ofp2;
	public $data1;
	public $data2;
	public function __construct($file1, $file2, $outfile1, $outfile2) {
		$this->f1 = $file1;
		$this->fp1 = fopen($file1, "r");
		if ($this->fp1 == NULL){
			fprintf(STDERR, "file1 %s opened error\n", $file1);
		} 
		$this->f2 = $file2;
		$this->fp2 = fopen($file2, "r");
		if ($this->fp2 == NULL){
			fprintf(STDERR, "file2 %s opened error\n", $file2);
		}
		
		$this->ofp1 = fopen($outfile1, "w");
		if ($this->ofp1 == NULL){
			fprintf(STDERR, "file2 %s opened error\n", $outfile1);
		}
		$this->ofp2 = fopen($outfile2, "w");
		if ($this->ofp2 == NULL){
			fprintf(STDERR, "file2 %s opened error\n", $outfile2);
		} 
	}
	protected function LoadPosition($fp){
		$line = fgets($fp);
		$flag = false;// flag is a signal about found the next query.
		$content = array();
		while(1){
			$line = trim($line);
			$list = split("\t", $line);
			//print_r($list);
			if ( count($list) != 3){
				//echo "EOF?\n";
				break;
			}
			$q1 = $list[1];
			$q2 = $list[2]; // q2 is ground truth
			$content[$q1][$q2]["results"] = array();
			$content[$q1][$q2]["value"] = $list[0];
			$i = 1;
			while($line = fgets($fp)){
				$line = trim($line);
				$list = split("\t", $line);
				//print_r($list);
				if ( count($list) > 1 ){
					$flag = true;
					break;
				}else{
					$content[$q1][$q2]["results"][$list[0]] = $i;
					$i++;
					//echo "stack result\n";
				}
			}
			if ($flag == true){
				$flag = false;
				continue;
			}
			if ($line = fgets($fp)){ // end of file
				break;
			}
		}
		fclose($fp);
		return $content;
	}
	protected function Load(){
		$this->data1 = $this->LoadPosition($this->fp1);
		$this->data2 = $this->LoadPosition($this->fp2);
	}
	protected function FindRank($gt, $results){
		if ( !isset($results["results"][$gt]) ){
			return -1;// infinite
		}else{
			return $results["results"][$gt];// the rank
		}
	}
	public function FindDifferent(){
		$this->Load();
		foreach ($this->data1 as $q1 => $v1){ // assume data1 is generated by baseline
			foreach ($v1 as $q2 => $results){
				$rank1 = $this->FindRank($q2, $this->data1[$q1][$q2]);
				if ( !isset($this->data2[$q1][$q2]) ){
					// rank2 is infinite
					$rank2 = -1;
				}else{
					$rank2 = $this->FindRank($q2, $this->data2[$q1][$q2]);
				}
				
				if ($rank1 != -1 && (($rank1 < $rank2) || ($rank2 == -1)) ){ 
					// what if rank2 = -1;
					fprintf($this->ofp1, "%s\t%s\t%s\n",$results["value"], $q1, $q2 );
					foreach($results["results"] as $c => $i){
						fprintf($this->ofp1, "\t%s\n", $c);
					}
					fprintf($this->ofp2, "%s\t%s\t%s\n",$results["value"], $q1, $q2 );
					if ( !isset($this->data2[$q1][$q2]["results"]) || 
						empty($this->data2[$q1][$q2]["results"]) ){
						continue;
					}else{
						foreach($this->data2[$q1][$q2]["results"] as $c => $i){
							fprintf($this->ofp2, "\t%s\n", $c);
						}
					}
				}
			}
		}
		fclose($this->ofp1);
		fclose($this->ofp2);
	}
}
?>
